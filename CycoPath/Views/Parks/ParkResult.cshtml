@model dynamic
@using CycoPath.Models;
@using Jmelosegui.Mvc.GoogleMap

@{ List<string>
                 Name = new List<string>();
    List<double> CoordinatesX = new List<double>();
    List<double> CoordinatesY = new List<double>();

}

@foreach (Park parks in Model.Parks)
{
    string name = parks.Name;
    string[] coordinates = parks.Coordinates.Split(',');


    Name.Add(name);
    CoordinatesX.Add(double.Parse(coordinates[1]));
    CoordinatesY.Add(double.Parse(coordinates[0]));
}

@{ViewBag.startx = CoordinatesX[0]; }
@{ViewBag.starty = CoordinatesY[0]; }

@section scripts
                            {
    @(Html.GoogleMap().ScriptRegistrar())
}

@(

                                    Html.GoogleMap()
                                    .Name("map")
                                    .Height(400)
                                    .Center(c => c.Latitude((CoordinatesX[0]+ CoordinatesX[1])/2)
                                    .Longitude((CoordinatesY[0]+ CoordinatesY[0])/2))
                                    .Zoom(12)
                                    .Markers(m => m.Add()
                                    .Latitude(CoordinatesX[0])
                                    .Longitude(CoordinatesY[0])
                                    )
                                    .Markers(n => n.Add()
                                    .Latitude(CoordinatesX[1])
                                    .Longitude(CoordinatesY[1])
                                    )
                                    .Polylines(pf => pf.Add()
                                            .Points(ptn =>
                                            {
                                                foreach (List<double[]> path in Model.Paths)
                                                {
                                                    foreach (double[] points in path)
                                                    {
                                                        ptn.Add(points[1], points[0]);
                                                    }
                                                }
                                            })
                                            .StrokeColor(System.Drawing.Color.DarkRed))
)
<div class="container">
    <div class="row">
@using (Html.BeginForm("Index", "Carparks", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    int i = 0;
    foreach (Park park in Model.Parks)
    {
            <div class="col-md-4 portfolio-item">
                <div class="thumbnail">

                    <img class="img-responsive" src="http://placehold.it/700x400" alt="">

                    <h3>
                        <a>@Html.DisplayFor(modelItem => park.Name)</a>
                    </h3>
                    @{int k = 0;
                    }
                    @foreach (Weather weather in Model.Weather)
                    {
                        if (k == 0 && i == 0)
                        {
                            <p>Forcast: @Html.DisplayFor(modelItem => weather.Forecast)</p>
                        }
                        else if (k == 1 && i == 1)
                        {
                            <p>Forcast: @Html.DisplayFor(modelItem => weather.Forecast)</p>
                        }
                        k++;
                    }
                    
                </div>
            </div>
            i++;
        }
        <div class="col-md-4 portfolio-item">
            <div class="caption">
                <h3>Information</h3>
                <p>To set path as the path that are you going select the radio button bellow. By selecting the radio button, this path will be saved and can be used in "Track Me!" function.</p>
                <div class="thumbnail">
                    <div class="radio">
                        <label>
                            <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked>
                            Set as path!
                        </label>
                    </div>
                    <div class="radio">
                        <label>
                            <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2">
                            Set as path and search carpark!
                        </label>
                    </div>
                </div>
                <input type="hidden" id="hiddenTab" name="hiddenTab" value="@ViewBag.startx" />
                <input type="hidden" id="hiddenTab1" name="hiddenTab1" value="@ViewBag.starty" />
                <button type="submit" class="btn btn-default">
                    Submit
                </button>
            </div>
        </div>
}
    </div>
</div>




@*<table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Color)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DescriptionAndPostalCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Coordinates)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Color)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DescriptionAndPostalCode)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Coordinates)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </table>

    @using (Html.BeginForm("PathResult", "Parks", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @{ int i = 0;}
            @foreach (var item in Model)
            {
                var tmp = "no" + i;
                <input type="hidden" name="@tmp" value="@Html.DisplayFor(modelItem => item.Name)">
                i++;


            }
            <button type="submit" class="btn btn-default">
                Connect Park
            </button>

        </div>

                }*@





